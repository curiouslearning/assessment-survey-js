/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={};function t(){var e=n().get("data");return null==e&&(console.log("default data file"),e="zulu-lettersounds"),e}function n(){const e=window.location.search;return new URLSearchParams(e)}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var i=function(e,t,n,i){return new(n||(n=Promise))((function(s,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function r(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}c((i=i.apply(e,t||[])).next())}))};function s(e){return"/data/"+e+".json"}function a(e){return i(this,void 0,void 0,(function*(){var t=s(e);return fetch(t).then((e=>e.json()))}))}class o{constructor(){this.imageToCache=[],this.wavToCache=[],this.allAudios={},this.allImages={},this.dataURL="",this.correctSoundPath="dist/audio/Correct.wav",this.feedbackAudio=null,this.correctAudio=null}init(){this.feedbackAudio=new Audio,this.feedbackAudio.src=this.correctSoundPath,this.correctAudio=new Audio}static PrepareAudioAndImagesForSurvey(e,t){o.getInstance().dataURL=t;const n="audio/"+o.getInstance().dataURL+"/answer_feedback.mp3";for(var i in o.getInstance().wavToCache.push(n),o.getInstance().correctAudio.src=n,e){let t=e[i];for(var s in null!=t.promptAudio&&o.FilterAndAddAudioToAllAudios(t.promptAudio.toLowerCase()),null!=t.promptImg&&o.AddImageToAllImages(t.promptImg),t.answers){let e=t.answers[s];null!=e.answerImg&&o.AddImageToAllImages(e.answerImg)}}console.log(o.getInstance().allAudios),console.log(o.getInstance().allImages)}static AddImageToAllImages(e){console.log("Add image: "+e);let t=new Image;t.src=e,o.getInstance().allImages[e]=t}static FilterAndAddAudioToAllAudios(e){console.log("Adding audio: "+e),e.includes(".wav")?e=e.replace(".wav",".mp3"):e.includes(".mp3")||(e=e.trim()+".mp3"),console.log("Filtered: "+e);let t=new Audio;["luganda"].includes(o.getInstance().dataURL.split("-")[0]),t.src="audio/"+o.getInstance().dataURL+"/"+e,o.getInstance().allAudios[e]=t,console.log(t.src)}static PreloadBucket(e,t){for(var n in o.getInstance().dataURL=t,o.getInstance().correctAudio.src="audio/"+o.getInstance().dataURL+"/answer_feedback.mp3",e.items){var i=e.items[n];o.FilterAndAddAudioToAllAudios(i.itemName.toLowerCase())}}static PlayAudio(e,t,n){e=e.toLowerCase(),console.log("trying to play "+e),e.includes(".mp3")?".mp3"!=e.slice(-4)&&(e=e.trim()+".mp3"):e=e.trim()+".mp3",console.log("Pre play all audios: "),console.log(o.getInstance().allAudios),new Promise(((t,i)=>{const s=o.getInstance().allAudios[e];s?(s.addEventListener("play",(()=>{void 0!==n&&n(!0)})),s.addEventListener("ended",(()=>{void 0!==n&&n(!1),t()})),s.play().catch((e=>{console.error("Error playing audio:",e),t()}))):(console.warn("Audio file not found:",e),t())})).then((()=>{void 0!==t&&t()})).catch((e=>{console.error("Promise error:",e)}))}static GetImage(e){return o.getInstance().allImages[e]}static PlayDing(){o.getInstance().feedbackAudio.play()}static PlayCorrect(){o.getInstance().correctAudio.play()}static getInstance(){return null==o.instance&&(o.instance=new o,o.instance.init()),o.instance}}function r(e){return e[Math.floor(Math.random()*e.length)]}function c(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}}o.instance=null;class l{constructor(){this.landingContainerId="landWrap",this.gameContainerId="gameWrap",this.endContainerId="endWrap",this.starContainerId="starWrapper",this.chestContainerId="chestWrapper",this.questionsContainerId="qWrap",this.feedbackContainerId="feedbackWrap",this.answersContainerId="aWrap",this.answerButton1Id="answerButton1",this.answerButton2Id="answerButton2",this.answerButton3Id="answerButton3",this.answerButton4Id="answerButton4",this.answerButton5Id="answerButton5",this.answerButton6Id="answerButton6",this.playButtonId="pbutton",this.chestImgId="chestImage",this.nextQuestion=null,this.contentLoaded=!1,this.shown=!1,this.stars=[],this.shownStarsCount=0,this.starPositions=Array(),this.qAnsNum=0,this.buttons=[],this.buttonsActive=!1,this.devModeCorrectLabelVisibility=!1,this.animationSpeedMultiplier=1}init(){this.landingContainer=document.getElementById(this.landingContainerId),this.gameContainer=document.getElementById(this.gameContainerId),this.endContainer=document.getElementById(this.endContainerId),this.starContainer=document.getElementById(this.starContainerId),this.chestContainer=document.getElementById(this.chestContainerId),this.questionsContainer=document.getElementById(this.questionsContainerId),this.feedbackContainer=document.getElementById(this.feedbackContainerId),this.answersContainer=document.getElementById(this.answersContainerId),this.answerButton1=document.getElementById(this.answerButton1Id),this.answerButton2=document.getElementById(this.answerButton2Id),this.answerButton3=document.getElementById(this.answerButton3Id),this.answerButton4=document.getElementById(this.answerButton4Id),this.answerButton5=document.getElementById(this.answerButton5Id),this.answerButton6=document.getElementById(this.answerButton6Id),this.playButton=document.getElementById(this.playButtonId),this.chestImg=document.getElementById(this.chestImgId),this.initializeStars(),this.initEventListeners()}initializeStars(){for(let e=0;e<20;e++){const t=document.createElement("img");t.id="star"+e,t.classList.add("topstarv"),this.starContainer.appendChild(t),this.starContainer.innerHTML+="",9==e&&(this.starContainer.innerHTML+="<br>"),this.stars.push(e)}c(this.stars)}SetAnimationSpeedMultiplier(e){l.getInstance().animationSpeedMultiplier=e}SetCorrectLabelVisibility(e){this.devModeCorrectLabelVisibility=e,console.log("Correct label visibility set to ",this.devModeCorrectLabelVisibility)}static OverlappingOtherStars(e,t,n,i){if(e.length<1)return!1;for(let s=0;s<e.length;s++){const a=e[s].x-t,o=e[s].y-n;if(Math.sqrt(a*a+o*o)<i)return!0}return!1}initEventListeners(){this.answerButton1.addEventListener("click",(()=>{this.answerButtonPress(1)})),this.buttons.push(this.answerButton1),this.answerButton2.addEventListener("click",(()=>{this.answerButtonPress(2)})),this.buttons.push(this.answerButton2),this.answerButton3.addEventListener("click",(()=>{this.answerButtonPress(3)})),this.buttons.push(this.answerButton3),this.answerButton4.addEventListener("click",(()=>{this.answerButtonPress(4)})),this.buttons.push(this.answerButton4),this.answerButton5.addEventListener("click",(()=>{this.answerButtonPress(5)})),this.buttons.push(this.answerButton5),this.answerButton6.addEventListener("click",(()=>{this.answerButtonPress(6)})),this.buttons.push(this.answerButton6),this.landingContainer.addEventListener("click",(()=>{localStorage.getItem(t())&&this.showGame()}))}showOptions(){if(!l.getInstance().shown){const e=l.getInstance().nextQuestion,t=l.getInstance().buttons,n=l.getInstance().animationSpeedMultiplier;let i=220*n;const s=150*n;l.getInstance().shown=!0;let a=0;t.forEach((e=>{e.style.visibility="hidden",e.style.animation="",e.innerHTML=""})),setTimeout((()=>{for(let s=0;s<e.answers.length;s++){const r=e.answers[s],c=t[s],u=r.answerName===e.correct;if(c.innerHTML="answerText"in r?r.answerText:"",u&&l.getInstance().devModeCorrectLabelVisibility){const e=document.createElement("div");e.classList.add("correct-label"),e.innerHTML="Correct",c.appendChild(e)}c.style.visibility="hidden",c.style.boxShadow="0px 0px 0px 0px rgba(0,0,0,0)",setTimeout((()=>{if(c.style.visibility="visible",c.style.boxShadow="0px 6px 8px #606060",c.style.animation=`zoomIn ${i*n}ms ease forwards`,"answerImg"in r){const e=o.GetImage(r.answerImg);c.appendChild(e)}c.addEventListener("animationend",(()=>{a++,a===e.answers.length&&l.getInstance().enableAnswerButton()}))}),s*i*n*.3)}}),s),l.getInstance().qStart=Date.now()}}enableAnswerButton(){l.getInstance().buttonsActive=!0}static SetFeedbackText(e){console.log("Feedback text set to "+e),l.getInstance().feedbackContainer.innerHTML=e}showLanding(){this.landingContainer.style.display="flex",this.gameContainer.style.display="none",this.endContainer.style.display="none"}static ShowEnd(){l.getInstance().landingContainer.style.display="none",l.getInstance().gameContainer.style.display="none",l.getInstance().endContainer.style.display="flex"}showGame(){this.landingContainer.style.display="none",this.gameContainer.style.display="grid",this.endContainer.style.display="none",this.allStart=Date.now(),this.startPressCallback()}static SetFeedbackVisibile(e,t){e?(l.getInstance().feedbackContainer.classList.remove("hidden"),l.getInstance().feedbackContainer.classList.add("visible"),l.getInstance().buttonsActive=!1,t?(l.getInstance().feedbackContainer.style.color="rgb(109, 204, 122)",o.PlayCorrect()):l.getInstance().feedbackContainer.style.color="red"):(l.getInstance().feedbackContainer.classList.remove("visible"),l.getInstance().feedbackContainer.classList.add("hidden"),l.getInstance().buttonsActive=!1)}static ReadyForNext(e){if(null!==e){for(var t in console.log("ready for next!"),l.getInstance().answersContainer.style.visibility="hidden",l.getInstance().buttons)l.getInstance().buttons[t].style.visibility="hidden";l.getInstance().shown=!1,l.getInstance().nextQuestion=e,l.getInstance().questionsContainer.innerHTML="",l.getInstance().questionsContainer.style.display="none",l.getInstance().playButton.innerHTML="<button id='nextqButton'><img class=audio-button width='100px' height='100px' src='/img/SoundButton_Idle.png' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){l.ShowQuestion(),o.PlayAudio(e.promptAudio,l.getInstance().showOptions,l.ShowAudioAnimation)}))}}static ShowAudioAnimation(e=!1){l.getInstance().playButton.querySelector("img").src=e?"animation/SoundButton.gif":"/img/SoundButton_Idle.png"}static ShowQuestion(e){l.getInstance().playButton.innerHTML="<button id='nextqButton'><img class=audio-button width='100px' height='100px' src='/img/SoundButton_Idle.png' type='image/svg+xml'> </img></button>",document.getElementById("nextqButton").addEventListener("click",(function(){console.log("next question button pressed"),console.log(e.promptAudio),"promptAudio"in e&&o.PlayAudio(e.promptAudio,void 0,l.ShowAudioAnimation)})),l.getInstance().answersContainer.style.visibility="visible";let t="";if(l.getInstance().questionsContainer.innerHTML="",void 0===e&&(e=l.getInstance().nextQuestion),"promptImg"in e){var n=o.GetImage(e.promptImg);l.getInstance().questionsContainer.appendChild(n)}for(var i in t+=e.promptText,t+="<BR>",l.getInstance().questionsContainer.innerHTML+=t,l.getInstance().buttons)l.getInstance().buttons[i].style.visibility="hidden"}static AddStar(){var e=document.getElementById("star"+l.getInstance().stars[l.getInstance().qAnsNum]);e.src="../animation/Star.gif",e.classList.add("topstarv"),e.classList.remove("topstarh"),e.style.position="absolute";let t=l.getInstance().starContainer.offsetWidth,n=l.getInstance().starContainer.offsetHeight;console.log("Stars Container dimensions: ",t,n);let i=0,s=0;do{i=Math.floor(Math.random()*(t-.2*t)),s=Math.floor(Math.random()*n)}while(l.OverlappingOtherStars(l.instance.starPositions,i,s,28));const a=l.getInstance().animationSpeedMultiplier;e.style.transform="scale(10)",e.style.transition=`top ${1*a}s ease, left ${1*a}s ease, transform ${.5*a}s ease`,e.style.zIndex="500",e.style.top=window.innerHeight/2+"px",e.style.left=l.instance.gameContainer.offsetWidth/2-e.offsetWidth/2+"px",setTimeout((()=>{if(e.style.transition=`top ${2*a}s ease, left ${2*a}s ease, transform ${2*a}s ease`,i<t/2-30){const t=5+8*Math.random();console.log("Rotating star to the right",t),e.style.transform="rotate(-"+t+"deg) scale(1)"}else{const t=5+8*Math.random();console.log("Rotating star to the left",t),e.style.transform="rotate("+t+"deg) scale(1)"}e.style.left=10+i+"px",e.style.top=s+"px",setTimeout((()=>{e.style.filter="drop-shadow(0px 0px 10px yellow)"}),1900*a)}),1e3*a),l.instance.starPositions.push({x:i,y:s}),l.getInstance().qAnsNum+=1,l.getInstance().shownStarsCount+=1}static ChangeStarImageAfterAnimation(){document.getElementById("star"+l.getInstance().stars[l.getInstance().qAnsNum-1]).src="../img/star_after_animation.gif"}answerButtonPress(e){const t=this.buttons.every((e=>"visible"===e.style.visibility));if(console.log(this.buttonsActive,t),!0===this.buttonsActive){o.PlayDing();const t=Date.now()-this.qStart;console.log("answered in "+t),this.buttonPressCallback(e,t)}}static ProgressChest(){const e=document.getElementById("chestImage");let t=e.src;console.log("Chest Progression--\x3e",e),console.log("Chest Progression--\x3e",e.src);const n=parseInt(t.slice(-6,-4),10);console.log("Chest Progression number--\x3e",n);const i=`img/chestprogression/TreasureChestOpen0${n%4+1}.svg`;e.src=i}static SetContentLoaded(e){l.getInstance().contentLoaded=e}static SetButtonPressAction(e){l.getInstance().buttonPressCallback=e}static SetStartAction(e){l.getInstance().startPressCallback=e}static getInstance(){return null===l.instance&&(l.instance=new l,l.instance.init()),l.instance}}l.instance=null;const u=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let s=e.charCodeAt(i);s<128?t[n++]=s:s<2048?(t[n++]=s>>6|192,t[n++]=63&s|128):55296==(64512&s)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++i)),t[n++]=s>>18|240,t[n++]=s>>12&63|128,t[n++]=s>>6&63|128,t[n++]=63&s|128):(t[n++]=s>>12|224,t[n++]=s>>6&63|128,t[n++]=63&s|128)}return t},d={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const s=e[t],a=t+1<e.length,o=a?e[t+1]:0,r=t+2<e.length,c=r?e[t+2]:0,l=s>>2,u=(3&s)<<4|o>>4;let d=(15&o)<<2|c>>6,h=63&c;r||(h=64,a||(d=64)),i.push(n[l],n[u],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(u(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const s=e[n++];if(s<128)t[i++]=String.fromCharCode(s);else if(s>191&&s<224){const a=e[n++];t[i++]=String.fromCharCode((31&s)<<6|63&a)}else if(s>239&&s<365){const a=((7&s)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(a>>10)),t[i++]=String.fromCharCode(56320+(1023&a))}else{const a=e[n++],o=e[n++];t[i++]=String.fromCharCode((15&s)<<12|(63&a)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const s=n[e.charAt(t++)],a=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const r=t<e.length?n[e.charAt(t)]:64;if(++t,null==s||null==a||null==o||null==r)throw Error();const c=s<<2|a>>4;if(i.push(c),64!==o){const e=a<<4&240|o>>2;if(i.push(e),64!==r){const e=o<<6&192|r;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},h=function(e){return function(e){const t=u(e);return d.encodeByteArray(t,!0)}(e).replace(/\./g,"")};function p(){return"object"==typeof indexedDB}function g(){return new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(i);s.onsuccess=()=>{s.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},s.onupgradeneeded=()=>{n=!1},s.onerror=()=>{var e;t((null===(e=s.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}const m=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return d.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}};class f{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}class b extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,b.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,v.prototype.create)}}class v{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,s=this.errors[e],a=s?function(e,t){return e.replace(w,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(s,n):"Error",o=`${this.serviceName}: ${a} (${i}).`;return new b(i,o,n)}}const w=/\{\$([^}]+)}/g;function y(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const s of n){if(!i.includes(s))return!1;const n=e[s],a=t[s];if(I(n)&&I(a)){if(!y(n,a))return!1}else if(n!==a)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function I(e){return null!==e&&"object"==typeof e}function S(e,t=1e3,n=2){const i=t*Math.pow(n,e),s=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+s)}function k(e){return e&&e._delegate?e._delegate:e}class B{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const C="[DEFAULT]";class A{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new f;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:C})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),s=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;s.add(e),this.onInitCallbacks.set(i,s);const a=this.instances.get(i);return a&&e(a,i),()=>{s.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===C?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:C:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class L{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new A(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const M=[];var T;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(T||(T={}));const E={debug:T.DEBUG,verbose:T.VERBOSE,info:T.INFO,warn:T.WARN,error:T.ERROR,silent:T.SILENT},D=T.INFO,R={[T.DEBUG]:"log",[T.VERBOSE]:"log",[T.INFO]:"info",[T.WARN]:"warn",[T.ERROR]:"error"},x=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),s=R[t];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[s](`[${i}]  ${e.name}:`,...n)};class N{constructor(e){this.name=e,this._logLevel=D,this._logHandler=x,this._userLogHandler=null,M.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in T))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?E[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,T.DEBUG,...e),this._logHandler(this,T.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,T.VERBOSE,...e),this._logHandler(this,T.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,T.INFO,...e),this._logHandler(this,T.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,T.WARN,...e),this._logHandler(this,T.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,T.ERROR,...e),this._logHandler(this,T.ERROR,...e)}}let P,F;const U=new WeakMap,O=new WeakMap,j=new WeakMap,V=new WeakMap,$=new WeakMap;let q={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return O.get(e);if("objectStoreNames"===t)return e.objectStoreNames||j.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return W(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function H(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(F||(F=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(G(this),e),W(U.get(this))}:function(...e){return W(t.apply(G(this),e))}:function(e,...n){const i=t.call(G(this),e,...n);return j.set(i,e.sort?e.sort():[e]),W(i)}:(e instanceof IDBTransaction&&function(e){if(O.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",a),e.removeEventListener("abort",a)},s=()=>{t(),i()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",s),e.addEventListener("error",a),e.addEventListener("abort",a)}));O.set(e,t)}(e),n=e,(P||(P=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,q):e);var t,n}function W(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",s),e.removeEventListener("error",a)},s=()=>{t(W(e.result)),i()},a=()=>{n(e.error),i()};e.addEventListener("success",s),e.addEventListener("error",a)}));return t.then((t=>{t instanceof IDBCursor&&U.set(t,e)})).catch((()=>{})),$.set(t,e),t}(e);if(V.has(e))return V.get(e);const t=H(e);return t!==e&&(V.set(e,t),$.set(t,e)),t}const G=e=>$.get(e);function z(e,t,{blocked:n,upgrade:i,blocking:s,terminated:a}={}){const o=indexedDB.open(e,t),r=W(o);return i&&o.addEventListener("upgradeneeded",(e=>{i(W(o.result),e.oldVersion,e.newVersion,W(o.transaction))})),n&&o.addEventListener("blocked",(()=>n())),r.then((e=>{a&&e.addEventListener("close",(()=>a())),s&&e.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),r}const Q=["get","getKey","getAll","getAllKeys","count"],K=["put","add","delete","clear"],J=new Map;function X(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(J.get(t))return J.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,s=K.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!s&&!Q.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,s?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),s&&a.done]))[0]};return J.set(t,a),a}var Y;Y=q,q={...Y,get:(e,t,n)=>X(e,t)||Y.get(e,t,n),has:(e,t)=>!!X(e,t)||Y.has(e,t)};class Z{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const ee="@firebase/app",te="0.8.2",ne=new N("@firebase/app"),ie="[DEFAULT]",se={[ee]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},ae=new Map,oe=new Map;function re(e,t){try{e.container.addComponent(t)}catch(n){ne.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function ce(e){const t=e.name;if(oe.has(t))return ne.debug(`There were multiple attempts to register component ${t}.`),!1;oe.set(t,e);for(const t of ae.values())re(t,e);return!0}function le(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const ue=new v("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class de{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new B("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw ue.create("app-deleted",{appName:this._name})}}function he(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:ie,automaticDataCollectionEnabled:!1},t),s=i.name;if("string"!=typeof s||!s)throw ue.create("bad-app-name",{appName:String(s)});var a;if(n||(n=null===(a=m())||void 0===a?void 0:a.config),!n)throw ue.create("no-options");const o=ae.get(s);if(o){if(y(n,o.options)&&y(i,o.config))return o;throw ue.create("duplicate-app",{appName:s})}const r=new L(s);for(const e of oe.values())r.addComponent(e);const c=new de(n,i,r);return ae.set(s,c),c}function pe(e,t,n){var i;let s=null!==(i=se[e])&&void 0!==i?i:e;n&&(s+=`-${n}`);const a=s.match(/\s|\//),o=t.match(/\s|\//);if(a||o){const e=[`Unable to register library "${s}" with version "${t}":`];return a&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),a&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void ne.warn(e.join(" "))}ce(new B(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}const ge="firebase-heartbeat-store";let me=null;function fe(){return me||(me=z("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(ge)}}).catch((e=>{throw ue.create("idb-open",{originalErrorMessage:e.message})}))),me}async function be(e,t){var n;try{const n=(await fe()).transaction(ge,"readwrite"),i=n.objectStore(ge);return await i.put(t,ve(e)),n.done}catch(e){if(e instanceof b)ne.warn(e.message);else{const t=ue.create("idb-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message});ne.warn(t.message)}}}function ve(e){return`${e.name}!${e.options.appId}`}class we{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Ie(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ye();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ye(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let i=e.slice();for(const s of e){const e=n.find((e=>e.agent===s.agent));if(e){if(e.dates.push(s.date),Se(n)>t){e.dates.pop();break}}else if(n.push({agent:s.agent,dates:[s.date]}),Se(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=h(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function ye(){return(new Date).toISOString().substring(0,10)}class Ie{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!p()&&g().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){var t;try{return(await fe()).transaction(ge).objectStore(ge).get(ve(e))}catch(e){if(e instanceof b)ne.warn(e.message);else{const n=ue.create("idb-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message});ne.warn(n.message)}}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return be(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return be(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Se(e){return h(JSON.stringify({version:2,heartbeats:e})).length}ce(new B("platform-logger",(e=>new Z(e)),"PRIVATE")),ce(new B("heartbeat",(e=>new we(e)),"PRIVATE")),pe(ee,te,""),pe(ee,te,"esm2017"),pe("fire-js","");const ke="@firebase/installations",Be="0.5.15",Ce="w:0.5.15",Ae=new v("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function Le(e){return e instanceof b&&e.code.includes("request-failed")}function Me({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function Te(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function Ee(e,t){const n=(await t.json()).error;return Ae.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function De({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function _e(e){const t=await e();return t.status>=500&&t.status<600?e():t}function Re(e){return new Promise((t=>{setTimeout(t,e)}))}const xe=/^[cdef][\w-]{21}$/;function Ne(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return xe.test(t)?t:""}catch(e){return""}}function Pe(e){return`${e.appName}!${e.appId}`}const Fe=new Map;function Ue(e,t){const n=Pe(e);Oe(n,t),function(e,t){const n=(!je&&"BroadcastChannel"in self&&(je=new BroadcastChannel("[Firebase] FID Change"),je.onmessage=e=>{Oe(e.data.key,e.data.fid)}),je);n&&n.postMessage({key:e,fid:t}),0===Fe.size&&je&&(je.close(),je=null)}(n,t)}function Oe(e,t){const n=Fe.get(e);if(n)for(const e of n)e(t)}let je=null;const Ve="firebase-installations-store";let $e=null;function qe(){return $e||($e=z("firebase-installations-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(Ve)}})),$e}async function He(e,t){const n=Pe(e),i=(await qe()).transaction(Ve,"readwrite"),s=i.objectStore(Ve),a=await s.get(n);return await s.put(t,n),await i.done,a&&a.fid===t.fid||Ue(e,t.fid),t}async function We(e){const t=Pe(e),n=(await qe()).transaction(Ve,"readwrite");await n.objectStore(Ve).delete(t),await n.done}async function Ge(e,t){const n=Pe(e),i=(await qe()).transaction(Ve,"readwrite"),s=i.objectStore(Ve),a=await s.get(n),o=t(a);return void 0===o?await s.delete(n):await s.put(o,n),await i.done,!o||a&&a.fid===o.fid||Ue(e,o.fid),o}async function ze(e){let t;const n=await Ge(e.appConfig,(n=>{const i=function(e){return Je(e||{fid:Ne(),registrationStatus:0})}(n),s=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(Ae.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const i=Me(e),s=De(e),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const o={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:Ce},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _e((()=>fetch(i,r)));if(c.ok){const e=await c.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:Te(e.authToken)}}throw await Ee("Create Installation",c)}(e,t);return He(e.appConfig,n)}catch(n){throw Le(n)&&409===n.customData.serverCode?await We(e.appConfig):await He(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:Qe(e)}:{installationEntry:t}}(e,i);return t=s.registrationPromise,s.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function Qe(e){let t=await Ke(e.appConfig);for(;1===t.registrationStatus;)await Re(100),t=await Ke(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await ze(e);return n||t}return t}function Ke(e){return Ge(e,(e=>{if(!e)throw Ae.create("installation-not-found");return Je(e)}))}function Je(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Xe({appConfig:e,heartbeatServiceProvider:t},n){const i=function(e,{fid:t}){return`${Me(e)}/${t}/authTokens:generate`}(e,n),s=function(e,{refreshToken:t}){const n=De(e);return n.append("Authorization",function(e){return`FIS_v2 ${e}`}(t)),n}(e,n),a=t.getImmediate({optional:!0});if(a){const e=await a.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const o={installation:{sdkVersion:Ce,appId:e.appId}},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _e((()=>fetch(i,r)));if(c.ok)return Te(await c.json());throw await Ee("Generate Auth Token",c)}async function Ye(e,t=!1){let n;const i=await Ge(e.appConfig,(i=>{if(!et(i))throw Ae.create("not-registered");const s=i.authToken;if(!t&&(2===(a=s).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(a)))return i;var a;if(1===s.requestStatus)return n=async function(e,t){let n=await Ze(e.appConfig);for(;1===n.authToken.requestStatus;)await Re(100),n=await Ze(e.appConfig);const i=n.authToken;return 0===i.requestStatus?Ye(e,t):i}(e,t),i;{if(!navigator.onLine)throw Ae.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return n=async function(e,t){try{const n=await Xe(e,t),i=Object.assign(Object.assign({},t),{authToken:n});return await He(e.appConfig,i),n}catch(n){if(!Le(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await He(e.appConfig,n)}else await We(e.appConfig);throw n}}(e,t),t}}));return n?await n:i.authToken}function Ze(e){return Ge(e,(e=>{if(!et(e))throw Ae.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function et(e){return void 0!==e&&2===e.registrationStatus}function tt(e){return Ae.create("missing-app-config-values",{valueName:e})}const nt="installations";ce(new B(nt,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw tt("App Configuration");if(!e.name)throw tt("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw tt(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:le(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),ce(new B("installations-internal",(e=>{const t=le(e.getProvider("app").getImmediate(),nt).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:i}=await ze(t);return i?i.catch(console.error):Ye(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await ze(e);t&&await t}(n),(await Ye(n,t)).token}(t,e)}}),"PRIVATE")),pe(ke,Be),pe(ke,Be,"esm2017");const it="analytics",st="https://www.googletagmanager.com/gtag/js",at=new N("@firebase/analytics");function ot(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const rt=new v("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.'}),ct=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function lt(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function ut(e,t=ct,n){const{appId:i,apiKey:s,measurementId:a}=e.options;if(!i)throw rt.create("no-app-id");if(!s){if(a)return{measurementId:a,appId:i};throw rt.create("no-api-key")}const o=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new ht;return setTimeout((async()=>{r.abort()}),void 0!==n?n:6e4),dt({appId:i,apiKey:s,measurementId:a},o,r,t)}async function dt(e,{throttleEndTimeMillis:t,backoffCount:n},i,s=ct){var a,o;const{appId:r,measurementId:c}=e;try{await function(e,t){return new Promise(((n,i)=>{const s=Math.max(t-Date.now(),0),a=setTimeout(n,s);e.addEventListener((()=>{clearTimeout(a),i(rt.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(c)return at.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null===(a=e)||void 0===a?void 0:a.message}]`),{appId:r,measurementId:c};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:i}=e,s={method:"GET",headers:lt(i)},a="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),o=await fetch(a,s);if(200!==o.status&&304!==o.status){let e="";try{const n=await o.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw rt.create("config-fetch-failed",{httpStatus:o.status,responseMessage:e})}return o.json()}(e);return s.deleteThrottleMetadata(r),t}catch(t){const a=t;if(!function(e){if(!(e instanceof b&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(a)){if(s.deleteThrottleMetadata(r),c)return at.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==a?void 0:a.message}]`),{appId:r,measurementId:c};throw t}const l=503===Number(null===(o=null==a?void 0:a.customData)||void 0===o?void 0:o.httpStatus)?S(n,s.intervalMillis,30):S(n,s.intervalMillis),u={throttleEndTimeMillis:Date.now()+l,backoffCount:n+1};return s.setThrottleMetadata(r,u),at.debug(`Calling attemptFetch again in ${l} millis`),dt(e,u,i,s)}}class ht{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let pt,gt;async function mt(e,t,n,i,s,a,o){var r;const c=ut(e);c.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&at.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>at.error(e))),t.push(c);const l=async function(){var e;if(!p())return at.warn(rt.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await g()}catch(t){return at.warn(rt.create("indexeddb-unavailable",{errorInfo:null===(e=t)||void 0===e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[u,d]=await Promise.all([c,l]);(function(e){const t=window.document.getElementsByTagName("script");for(const n of Object.values(t))if(n.src&&n.src.includes(st)&&n.src.includes(e))return n;return null})(a)||function(e,t){const n=document.createElement("script");n.src=`${st}?l=${e}&id=${t}`,n.async=!0,document.head.appendChild(n)}(a,u.measurementId),gt&&(s("consent","default",gt),gt=void 0),s("js",new Date);const h=null!==(r=null==o?void 0:o.config)&&void 0!==r?r:{};return h.origin="firebase",h.update=!0,null!=d&&(h.firebase_id=d),s("config",u.measurementId,h),pt&&(s("set",pt),pt=void 0),u.measurementId}class ft{constructor(e){this.app=e}_delete(){return delete bt[this.app.options.appId],Promise.resolve()}}let bt={},vt=[];const wt={};let yt,It,St="dataLayer",kt=!1;function Bt(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=rt.create("invalid-analytics-context",{errorInfo:t});at.warn(n.message)}}();const i=e.options.appId;if(!i)throw rt.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw rt.create("no-api-key");at.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=bt[i])throw rt.create("already-exists",{id:i});if(!kt){!function(e){let t=[];Array.isArray(window.dataLayer)?t=window.dataLayer:window.dataLayer=t}();const{wrappedGtag:e,gtagCore:t}=function(e,t,n,i,s){let a=function(...e){window.dataLayer.push(arguments)};return window.gtag&&"function"==typeof window.gtag&&(a=window.gtag),window.gtag=function(e,t,n,i){return async function(s,a,o){try{"event"===s?await async function(e,t,n,i,s){try{let a=[];if(s&&s.send_to){let e=s.send_to;Array.isArray(e)||(e=[e]);const i=await ot(n);for(const n of e){const e=i.find((e=>e.measurementId===n)),s=e&&t[e.appId];if(!s){a=[];break}a.push(s)}}0===a.length&&(a=Object.values(t)),await Promise.all(a),e("event",i,s||{})}catch(e){at.error(e)}}(e,t,n,a,o):"config"===s?await async function(e,t,n,i,s,a){const o=i[s];try{if(o)await t[o];else{const e=(await ot(n)).find((e=>e.measurementId===s));e&&await t[e.appId]}}catch(e){at.error(e)}e("config",s,a)}(e,t,n,i,a,o):"consent"===s?e("consent","update",o):e("set",a)}catch(e){at.error(e)}}}(a,e,t,n),{gtagCore:a,wrappedGtag:window.gtag}}(bt,vt,wt);It=e,yt=t,kt=!0}return bt[i]=mt(e,vt,wt,t,yt,St,n),new ft(e)}function Ct(e,t,n,i){e=k(e),async function(e,t,n,i,s){if(s&&s.global)e("event",n,i);else{const s=await t;e("event",n,Object.assign(Object.assign({},i),{send_to:s}))}}(It,bt[e.app.options.appId],t,n,i).catch((e=>at.error(e)))}const At="@firebase/analytics",Lt="0.8.3";ce(new B(it,((e,{options:t})=>Bt(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),ce(new B("analytics-internal",(function(e){try{const t=e.getProvider(it).getImmediate();return{logEvent:(e,n,i)=>Ct(t,e,n,i)}}catch(e){throw rt.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),pe(At,Lt),pe(At,Lt,"esm2017");class Mt{constructor(){}static getInstance(){return Mt.instance||(Mt.instance=new Mt),Mt.instance}static setAssessmentType(e){Mt.assessmentType=e}static getLocation(){console.log("starting to get location"),fetch("https://ipinfo.io/json?token=b6268727178610").then((e=>{if(console.log("got location response"),!e.ok)throw Error(e.statusText);return e.json()})).then((e=>{console.log(e),Mt.latlong=e.loc;var t=Mt.latlong.split(","),n=parseFloat(t[0]).toFixed(2),i=parseFloat(t[1]).toFixed(1);return Mt.clat=n,Mt.clon=i,Mt.latlong="",t=[],Mt.sendLocation(),{}})).catch((e=>{console.warn(`location failed to update! encountered error ${e.msg}`)}))}static linkAnalytics(e,t){Mt.gana=e,Mt.dataURL=t}static setUuid(e,t){Mt.uuid=e,Mt.userSource=t}static sendInit(e,t){Mt.appVersion=e,Mt.contentVersion=t,Mt.getLocation();var n="user "+Mt.uuid+" opened the assessment";console.log(n),Ct(Mt.gana,"opened",{})}static getAppLanguageFromDataURL(e){return e&&""!==e&&e.includes("-")?e.split("-")[0]:"NotAvailable"}static getAppTypeFromDataURL(e){return e&&""!==e&&e.includes("-")?e.split("-")[1]:"NotAvailable"}static sendLocation(){var e="Sending User coordinates: "+Mt.uuid+" : "+Mt.clat+", "+Mt.clon;console.log(e),Ct(Mt.gana,"user_location",{user:Mt.uuid,lang:Mt.getAppLanguageFromDataURL(Mt.dataURL),app:Mt.getAppTypeFromDataURL(Mt.dataURL),latlong:Mt.joinLatLong(Mt.clat,Mt.clon)}),console.log("INITIALIZED EVENT SENT"),console.log("App Language: "+Mt.getAppLanguageFromDataURL(Mt.dataURL)),console.log("App Type: "+Mt.getAppTypeFromDataURL(Mt.dataURL)),console.log("App Version: "+Mt.appVersion),console.log("Content Version: "+Mt.contentVersion),Ct(Mt.gana,"initialized",{type:"initialized",clUserId:Mt.uuid,userSource:Mt.userSource,latLong:Mt.joinLatLong(Mt.clat,Mt.clon),appVersion:Mt.appVersion,contentVersion:Mt.contentVersion,app:Mt.getAppTypeFromDataURL(Mt.dataURL),lang:Mt.getAppLanguageFromDataURL(Mt.dataURL)})}static sendAnswered(e,t,n){var i=e.answers[t-1],s=null,a=null;"correct"in e&&null!=e.correct&&(s=e.correct==i.answerName),"bucket"in e&&(a=e.bucket);var o="user "+Mt.uuid+" answered "+e.qName+" with "+i.answerName;o+=", all answers were [";var r="";for(var c in e.answers)o+=e.answers[c].answerName+",",r+=e.answers[c].answerName+",";o+="] ",o+=s,o+=a,console.log(o),console.log("Answered App Version: "+Mt.appVersion),console.log("Content Version: "+Mt.contentVersion),Ct(Mt.gana,"answered",{type:"answered",clUserId:Mt.uuid,userSource:Mt.userSource,latLong:Mt.joinLatLong(Mt.clat,Mt.clon),app:Mt.getAppTypeFromDataURL(Mt.dataURL),lang:Mt.getAppLanguageFromDataURL(Mt.dataURL),dt:n,question_number:e.qNumber,target:e.qTarget,question:e.promptText,selected_answer:i.answerName,iscorrect:s,options:r,bucket:a,appVersion:Mt.appVersion,contentVersion:Mt.contentVersion})}static sendBucket(e,t){var n=e.bucketID,i=e.numTried,s=e.numCorrect,a="user "+Mt.uuid+" finished the bucket "+n+" with "+s+" correct answers out of "+i+" tried and passed: "+t;console.log(a),console.log("Bucket Completed App Version: "+Mt.appVersion),console.log("Content Version: "+Mt.contentVersion),Ct(Mt.gana,"bucketCompleted",{type:"bucketCompleted",clUserId:Mt.uuid,userSource:Mt.userSource,latLong:Mt.joinLatLong(Mt.clat,Mt.clon),app:Mt.getAppTypeFromDataURL(Mt.dataURL),lang:Mt.getAppLanguageFromDataURL(Mt.dataURL),bucketNumber:n,numberTriedInBucket:i,numberCorrectInBucket:s,passedBucket:t,appVersion:Mt.appVersion,contentVersion:Mt.contentVersion})}static sendFinished(e=null,t,n){let i="user "+Mt.uuid+" finished the assessment";console.log(i);let s=Mt.getBasalBucketID(e),a=Mt.getCeilingBucketID(e);0==s&&(s=a);let o=Mt.calculateScore(e,s);const r=100*e.length;console.log("Sending completed event"),console.log("Score: "+o),console.log("Max Score: "+r),console.log("Basal Bucket: "+s),console.log("BASAL FROM ASSESSMENT: "+t),console.log("Ceiling Bucket: "+a),console.log("CEILING FROM ASSESSMENT: "+n),console.log("Completed App Version: "+Mt.appVersion),console.log("Content Version: "+Mt.contentVersion),Mt.sendDataToThirdParty(o,Mt.uuid),Ct(Mt.gana,"completed",{type:"completed",clUserId:Mt.uuid,userSource:Mt.userSource,app:Mt.getAppTypeFromDataURL(Mt.dataURL),lang:Mt.getAppLanguageFromDataURL(Mt.dataURL),latLong:Mt.joinLatLong(Mt.clat,Mt.clon),score:o,maxScore:r,basalBucket:s,ceilingBucket:a,appVersion:Mt.appVersion,contentVersion:Mt.contentVersion})}static sendDataToThirdParty(e,t){console.log("Attempting to send score to a third party! Score: ",e);const n=new URLSearchParams(window.location.search),i=n.get("endpoint"),s=(n.get("organization"),new XMLHttpRequest);if(!i)return void console.error("No target party URL found!");const a={user:t,page:"111108121363615",event:{type:"external",value:{type:"assessment",subType:Mt.assessmentType,score:e,completed:!0}}},o=JSON.stringify(a);try{s.open("POST",i,!0),s.setRequestHeader("Content-Type","application/json"),s.onload=function(){s.status>=200&&s.status<300?console.log("POST success!"+s.responseText):console.error("Request failed with status: "+s.status)},s.send(o)}catch(e){console.error("Failed to send data to target party: ",e)}}static calculateScore(e,t){console.log("Calculating score"),console.log(e);let n=0;console.log("Basal Bucket ID: "+t);let i=0;for(const n in e){const s=e[n];if(s.bucketID==t){i=s.numCorrect;break}}return console.log("Num Correct: "+i," basal: "+t," buckets: "+e.length),t===e.length&&i>=4?(console.log("Perfect score"),100*e.length):(n=0|Math.round(100*(t-1)+i/5*100),n)}static getBasalBucketID(e){let t=0;for(const n in e){const i=e[n];i.tested&&!i.passed&&(0==t||i.bucketID<t)&&(t=i.bucketID)}return t}static getCeilingBucketID(e){let t=0;for(const n in e){const i=e[n];i.tested&&i.passed&&(0==t||i.bucketID>t)&&(t=i.bucketID)}return t}static joinLatLong(e,t){return e+","+t}}class Tt{constructor(){this.devModeAvailable=!1,this.isInDevMode=!1,this.isCorrectLabelShown=!1,this.animationSpeedMultiplier=1,this.devModeToggleButtonContainerId="devModeModalToggleButtonContainer",this.devModeToggleButtonId="devModeModalToggleButton",this.devModeModalId="devModeSettingsModal",this.devModeBucketGenSelectId="devModeBucketGenSelect",this.devModeCorrectLabelShownCheckboxId="devModeCorrectLabelShownCheckbox",this.devModeAnimationSpeedMultiplierRangeId="devModeAnimationSpeedMultiplierRange",this.devModeAnimationSpeedMultiplierValueId="devModeAnimationSpeedMultiplierValue",this.toggleDevModeModal=()=>{"block"==this.devModeSettingsModal.style.display?this.devModeSettingsModal.style.display="none":this.devModeSettingsModal.style.display="block"},this.isInDevMode=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1")||window.location.href.includes("assessmentdev"),this.devModeToggleButtonContainer=document.getElementById(this.devModeToggleButtonContainerId),this.devModeSettingsModal=document.getElementById(this.devModeModalId),this.devModeBucketGenSelect=document.getElementById(this.devModeBucketGenSelectId),this.devModeBucketGenSelect.onchange=e=>{this.handleBucketGenModeChange(e)},this.devModeToggleButton=document.getElementById(this.devModeToggleButtonId),this.devModeToggleButton.onclick=this.toggleDevModeModal,this.devModeCorrectLabelShownCheckbox=document.getElementById(this.devModeCorrectLabelShownCheckboxId),this.devModeCorrectLabelShownCheckbox.onchange=()=>{this.isCorrectLabelShown=this.devModeCorrectLabelShownCheckbox.checked,this.handleCorrectLabelShownChange()},this.devModeAnimationSpeedMultiplierRange=document.getElementById(this.devModeAnimationSpeedMultiplierRangeId),this.devModeAnimationSpeedMultiplierValue=document.getElementById(this.devModeAnimationSpeedMultiplierValueId),this.devModeAnimationSpeedMultiplierRange.onchange=()=>{this.animationSpeedMultiplier=parseFloat(this.devModeAnimationSpeedMultiplierRange.value),this.animationSpeedMultiplier<.2&&(this.animationSpeedMultiplier=.2,this.devModeAnimationSpeedMultiplierRange.value="0.2"),this.devModeAnimationSpeedMultiplierValue.innerText=this.animationSpeedMultiplier.toString(),this.handleAnimationSpeedMultiplierChange()},this.isInDevMode?this.devModeToggleButtonContainer.style.display="block":this.devModeToggleButtonContainer.style.display="none",this.animationSpeedMultiplier=parseFloat(this.devModeAnimationSpeedMultiplierRange.value)}hideDevModeButton(){this.devModeToggleButtonContainer.style.display="none"}onEnd(){l.ShowEnd(),this.app.unityBridge.SendClose()}}class Et extends Tt{constructor(e,t){super(),this.handleBucketGenModeChange=()=>{console.log("Bucket Gen Mode Changed")},this.handleCorrectLabelShownChange=()=>{console.log("Correct Label Shown Changed")},this.startSurvey=()=>{l.ReadyForNext(this.getNextQuestion())},this.onQuestionEnd=()=>{l.SetFeedbackVisibile(!1,!1),this.currentQuestionIndex+=1,setTimeout((()=>{this.HasQuestionsLeft()?l.ReadyForNext(this.getNextQuestion()):(console.log("There are no questions left."),this.onEnd())}),500)},this.TryAnswer=(e,t)=>{Mt.sendAnswered(this.questionsData[this.currentQuestionIndex],e,t),l.SetFeedbackVisibile(!0,!0),l.AddStar(),setTimeout((()=>{this.onQuestionEnd()}),2e3)},this.buildQuestionList=()=>function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e.questions))}))}(this.app.dataURL),console.log("Survey initialized"),this.dataURL=e,this.unityBridge=t,this.currentQuestionIndex=0,l.SetButtonPressAction(this.TryAnswer),l.SetStartAction(this.startSurvey)}handleAnimationSpeedMultiplierChange(){console.log("Animation Speed Multiplier Changed")}Run(e){return t=this,n=void 0,s=function*(){this.app=e,this.buildQuestionList().then((e=>{this.questionsData=e,o.PrepareAudioAndImagesForSurvey(this.questionsData,this.app.GetDataURL()),this.unityBridge.SendLoaded()}))},new((i=void 0)||(i=Promise))((function(e,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function r(e){try{c(s.throw(e))}catch(e){a(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,r)}c((s=s.apply(t,n||[])).next())}));var t,n,i,s}HasQuestionsLeft(){return this.currentQuestionIndex<=this.questionsData.length-1}getNextQuestion(){return this.questionsData[this.currentQuestionIndex]}}class Dt{constructor(e){this.value=e,this.left=null,this.right=null}}function _t(e,t,n){if(e>t)return null;let i;if((e+t)%2==0&&1!==n.size){if(i=Math.floor((e+t)/2),0===i)return null}else do{i=Math.floor((e+t)/2),i+=Math.floor(2*Math.random())}while(i>t||n.has(i));n.add(i);let s=new Dt(i);return s.left=_t(e,i-1,n),s.right=_t(i+1,t,n),s}var Rt,xt;!function(e){e[e.BinarySearch=0]="BinarySearch",e[e.LinearSearchUp=1]="LinearSearchUp",e[e.LinearSearchDown=2]="LinearSearchDown"}(Rt||(Rt={})),function(e){e[e.RandomBST=0]="RandomBST",e[e.LinearArrayBased=1]="LinearArrayBased"}(xt||(xt={}));class Nt extends Tt{constructor(e,t){super(),this.bucketGenMode=xt.RandomBST,this.MAX_STARS_COUNT_IN_LINEAR_MODE=20,this.startAssessment=()=>{l.ReadyForNext(this.getNextQuestion()),this.isInDevMode&&this.hideDevModeButton()},this.buildBuckets=e=>{return t=this,n=void 0,o=function*(){if(void 0===this.buckets||0===this.buckets.length){var t=function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e.buckets))}))}(this.app.GetDataURL()).then((e=>{this.buckets=e,this.numBuckets=e.length,console.log("buckets: "+this.buckets),this.bucketArray=Array.from(Array(this.numBuckets),((e,t)=>t+1)),console.log("empty array "+this.bucketArray);let t=new Set;t.add(0);let n=_t(this.buckets[0].bucketID-1,this.buckets[this.buckets.length-1].bucketID,t),i=this.convertToBucketBST(n,this.buckets);console.log("Generated the buckets root ----------------------------------------------"),console.log(i),this.basalBucket=this.numBuckets+1,this.ceilingBucket=-1,this.currentNode=i,this.tryMoveBucket(!1)}));return t}return e===xt.RandomBST?new Promise(((e,t)=>{let n=new Set;n.add(0);let i=_t(this.buckets[0].bucketID-1,this.buckets[this.buckets.length-1].bucketID,n),s=this.convertToBucketBST(i,this.buckets);console.log("Generated the buckets root ----------------------------------------------"),console.log(s),this.basalBucket=this.numBuckets+1,this.ceilingBucket=-1,this.currentNode=s,this.tryMoveBucket(!1),e()})):e===xt.LinearArrayBased?new Promise(((e,t)=>{this.currentLinearBucketIndex=0,this.currentLinearTargetIndex=0,this.tryMoveBucket(!1),e()})):void 0},new((s=void 0)||(s=Promise))((function(e,i){function a(e){try{c(o.next(e))}catch(e){i(e)}}function r(e){try{c(o.throw(e))}catch(e){i(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(a,r)}c((o=o.apply(t,n||[])).next())}));var t,n,s,o},this.convertToBucketBST=(e,t)=>{if(null===e)return e;let n=e.value;return e.value=t.find((e=>e.bucketID===n)),null!==e.left&&(e.left=this.convertToBucketBST(e.left,t)),null!==e.right&&(e.right=this.convertToBucketBST(e.right,t)),e},this.initBucket=e=>{this.currentBucket=e,this.currentBucket.usedItems=[],this.currentBucket.numTried=0,this.currentBucket.numCorrect=0,this.currentBucket.numConsecutiveWrong=0,this.currentBucket.tested=!0,this.currentBucket.passed=!1},this.TryAnswer=(e,t)=>{this.bucketGenMode===xt.RandomBST&&Mt.sendAnswered(this.currentQuestion,e,t),this.currentBucket.numTried+=1,this.currentQuestion.answers[e-1].answerName==this.currentQuestion.correct?(this.currentBucket.numCorrect+=1,this.currentBucket.numConsecutiveWrong=0,console.log("Answered correctly")):(this.currentBucket.numConsecutiveWrong+=1,console.log("Answered incorrectly, "+this.currentBucket.numConsecutiveWrong)),(this.bucketGenMode===xt.LinearArrayBased&&l.getInstance().shownStarsCount<this.MAX_STARS_COUNT_IN_LINEAR_MODE||this.bucketGenMode===xt.RandomBST)&&l.AddStar(),l.SetFeedbackVisibile(!0,this.currentQuestion.answers[e-1].answerName==this.currentQuestion.correct),setTimeout((()=>{console.log("Completed first Timeout"),this.onQuestionEnd()}),2e3*this.animationSpeedMultiplier)},this.onQuestionEnd=()=>{let e=this.HasQuestionsLeft()?500*this.animationSpeedMultiplier:4e3*this.animationSpeedMultiplier;const t=()=>{if(l.SetFeedbackVisibile(!1,!1),(this.bucketGenMode===xt.LinearArrayBased&&l.getInstance().shownStarsCount<this.MAX_STARS_COUNT_IN_LINEAR_MODE||this.bucketGenMode===xt.RandomBST)&&l.ChangeStarImageAfterAnimation(),this.HasQuestionsLeft()){if(this.bucketGenMode===xt.LinearArrayBased&&(this.currentLinearTargetIndex<this.buckets[this.currentLinearBucketIndex].items.length&&(this.currentLinearTargetIndex++,this.currentBucket.usedItems=[]),this.currentLinearTargetIndex>=this.buckets[this.currentLinearBucketIndex].items.length&&this.currentLinearBucketIndex<this.buckets.length)){if(this.currentLinearBucketIndex++,this.currentLinearTargetIndex=0,!(this.currentLinearBucketIndex<this.buckets.length))return console.log("No questions left"),void this.onEnd();this.tryMoveBucket(!1)}l.ReadyForNext(this.getNextQuestion())}else console.log("No questions left"),this.onEnd()};new Promise((t=>{setTimeout((()=>{t()}),e)})).then((()=>{t()}))},this.getNextQuestion=()=>{if(this.bucketGenMode===xt.LinearArrayBased&&this.currentLinearTargetIndex>=this.buckets[this.currentLinearBucketIndex].items.length)return null;var e,t,n,i;if(this.bucketGenMode===xt.RandomBST){do{e=r(this.currentBucket.items)}while(this.currentBucket.usedItems.includes(e));this.currentBucket.usedItems.push(e);do{t=r(this.currentBucket.items)}while(e==t);do{n=r(this.currentBucket.items)}while(e==n||t==n);do{i=r(this.currentBucket.items)}while(e==i||t==i||n==i)}else if(this.bucketGenMode===xt.LinearArrayBased){e=this.buckets[this.currentLinearBucketIndex].items[this.currentLinearTargetIndex],this.currentBucket.usedItems.push(e);do{t=r(this.buckets[this.currentLinearBucketIndex].items)}while(e==t);do{n=r(this.buckets[this.currentLinearBucketIndex].items)}while(e==n||t==n);do{i=r(this.buckets[this.currentLinearBucketIndex].items)}while(e==i||t==i||n==i)}let s=[e,t,n,i];c(s);var a={qName:"question-"+this.questionNumber+"-"+e.itemName,qNumber:this.questionNumber,qTarget:e.itemName,promptText:"",bucket:this.currentBucket.bucketID,promptAudio:e.itemName,correct:e.itemText,answers:[{answerName:s[0].itemName,answerText:s[0].itemText},{answerName:s[1].itemName,answerText:s[1].itemText},{answerName:s[2].itemName,answerText:s[2].itemText},{answerName:s[3].itemName,answerText:s[3].itemText}]};return this.currentQuestion=a,this.questionNumber+=1,a},this.tryMoveBucket=e=>{this.bucketGenMode===xt.RandomBST?this.tryMoveBucketRandomBST(e):this.bucketGenMode===xt.LinearArrayBased&&this.tryMoveBucketLinearArrayBased(e)},this.tryMoveBucketRandomBST=e=>{const t=this.currentNode.value;null!=this.currentBucket&&(this.currentBucket.passed=e,Mt.sendBucket(this.currentBucket,e)),console.log("new  bucket is "+t.bucketID),o.PreloadBucket(t,this.app.GetDataURL()),this.initBucket(t)},this.tryMoveBucketLinearArrayBased=e=>{const t=this.buckets[this.currentLinearBucketIndex];console.log("New Bucket: "+t.bucketID),o.PreloadBucket(t,this.app.GetDataURL()),this.initBucket(t)},this.HasQuestionsLeft=()=>{var e=!0;return!this.currentBucket.passed&&(this.bucketGenMode===xt.LinearArrayBased?!(this.currentLinearBucketIndex>=this.buckets.length&&this.currentLinearTargetIndex>=this.buckets[this.currentLinearBucketIndex].items.length):(this.currentBucket.numCorrect>=4?(console.log("Passed this bucket "+this.currentBucket.bucketID),this.currentBucket.bucketID>=this.numBuckets?(console.log("Passed highest bucket"),this.currentBucket.passed=!0,this.bucketGenMode===xt.RandomBST&&Mt.sendBucket(this.currentBucket,!0),l.ProgressChest(),e=!1):(console.log("Moving up bucket"),null!=this.currentNode.right?(l.ProgressChest(),console.log("Moving to right node"),this.bucketGenMode===xt.RandomBST?this.currentNode=this.currentNode.right:this.currentLinearBucketIndex++,this.tryMoveBucket(!0)):(console.log("Reached root node"),this.currentBucket.passed=!0,this.bucketGenMode===xt.RandomBST&&Mt.sendBucket(this.currentBucket,!0),l.ProgressChest(),e=!1))):(this.currentBucket.numConsecutiveWrong>=2||this.currentBucket.numTried>=5)&&(console.log("Failed this bucket "+this.currentBucket.bucketID),this.currentBucket.bucketID<this.basalBucket&&(this.basalBucket=this.currentBucket.bucketID),this.currentBucket.bucketID<=1?(console.log("Failed lowest bucket !"),e=!1,this.currentBucket.passed=!1,this.bucketGenMode===xt.RandomBST&&Mt.sendBucket(this.currentBucket,!1)):(console.log("Moving down bucket !"),null!=this.currentNode.left?(console.log("Moving to left node"),this.bucketGenMode===xt.RandomBST?this.currentNode=this.currentNode.left:this.currentLinearBucketIndex++,this.tryMoveBucket(!1)):(console.log("Reached root node !"),e=!1,this.currentBucket.passed=!1,this.bucketGenMode===xt.RandomBST&&Mt.sendBucket(this.currentBucket,!1)))),e))},this.dataURL=e,this.unityBridge=t,this.questionNumber=0,console.log("app initialized"),l.SetButtonPressAction(this.TryAnswer),l.SetStartAction(this.startAssessment)}Run(e){this.app=e,this.buildBuckets(this.bucketGenMode).then((e=>{console.log(this.currentBucket),this.unityBridge.SendLoaded()}))}handleBucketGenModeChange(e){this.bucketGenMode=parseInt(this.devModeBucketGenSelect.value),this.buildBuckets(this.bucketGenMode).then((()=>{}))}handleCorrectLabelShownChange(){l.getInstance().SetCorrectLabelVisibility(this.isCorrectLabelShown)}handleAnimationSpeedMultiplierChange(){l.getInstance().SetAnimationSpeedMultiplier(this.animationSpeedMultiplier)}onEnd(){Mt.sendFinished(this.buckets,this.basalBucket,this.ceilingBucket),l.ShowEnd(),this.app.unityBridge.SendClose()}}class Pt{constructor(){"undefined"!=typeof Unity?this.unityReference=Unity:this.unityReference=null}SendMessage(e){null!==this.unityReference&&this.unityReference.call(e)}SendLoaded(){null!==this.unityReference?this.unityReference.call("loaded"):console.log("would call Unity loaded now")}SendClose(){null!==this.unityReference?this.unityReference.call("close"):console.log("would close Unity now")}}pe("firebase","9.12.1","app");try{self["workbox:window:7.0.0"]&&_()}catch(Ft){}function Ft(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function Ut(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Ot(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ut(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ut(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:7.0.0"]&&_()}catch(Ft){}var jt=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function Vt(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var $t=function(e,t){this.type=e,Object.assign(this,t)};function qt(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function Ht(){}var Wt={type:"SKIP_WAITING"};function Gt(e,t){if(!t)return e&&e.then?e.then(Ht):Promise.resolve()}var zt=function(e){var t,n;function i(t,n){var i,s;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new jt,i.en=new jt,i.on=new jt,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!Vt(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,s=n.state,a=n===i.vn,o={sw:n,isExternal:a,originalEvent:e};!a&&i.mn&&(o.isUpdate=!0),i.dispatchEvent(new $t(s,o)),"installed"===s?i.wn=self.setTimeout((function(){"installed"===s&&t.waiting===n&&i.dispatchEvent(new $t("waiting",o))}),200):"activating"===s&&(clearTimeout(i.wn),a||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new $t("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(s=function(e){var t=e.data,n=e.ports,s=e.source;return qt(i.getSW(),(function(){i.an.has(s)&&i.dispatchEvent(new $t("message",{data:t,originalEvent:e,ports:n,sw:s}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(s.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var s,a=i.prototype;return a.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return Gt(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),qt(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&Vt(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new $t("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},a.update=function(){try{return this.fn?Gt(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},a.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},a.messageSW=function(e){try{return qt(this.getSW(),(function(t){return Ft(t,e)}))}catch(e){return Promise.reject(e)}},a.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Ft(this.fn.waiting,Wt)},a.pn=function(){var e=navigator.serviceWorker.controller;return e&&Vt(e.scriptURL,this.sn.toString())?e:void 0},a.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return qt(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(s=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(i.prototype,s),i}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=Ot(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}());var Qt=function(e,t,n,i){return new(n||(n=Promise))((function(s,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function r(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}c((i=i.apply(e,t||[])).next())}))};let Kt=document.getElementById("loadingScreen");const Jt=document.getElementById("progressBar"),Xt=new BroadcastChannel("as-message-channel");function Yt(e){"Loading"==e.data.msg&&function(e,t){t<40&&t>=10?Jt.style.width=t+"%":t>=100&&(Jt.style.width="100%",setTimeout((()=>{Kt.style.display="none"}),1500),l.SetContentLoaded(!0),localStorage.setItem(e.data.data.bookName,"true"),function(e){if(window.Android){let t=null!==localStorage.getItem(e);window.Android.cachedStatus(t)}}(e.data.data.bookName))}(e,parseInt(e.data.data.progress)),"UpdateFound"==e.data.msg&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>.,update Found"),function(){let e="Update Found.\nPlease accept the update by pressing Ok.";1==confirm(e)?window.location.reload():e="Update will happen on the next launch."}())}Xt.addEventListener("message",Yt);const Zt=new class{constructor(){this.lang="english",this.unityBridge=new Pt,console.log("Initializing app..."),this.dataURL=t(),this.cacheModel=new class{constructor(e,t,n){this.appName=e,this.contentFilePath=t,this.audioVisualResources=n}setAppName(e){this.appName=e}setContentFilePath(e){this.contentFilePath=e}setAudioVisualResources(e){this.audioVisualResources=e}addItemToAudioVisualResources(e){this.audioVisualResources.has(e)||this.audioVisualResources.add(e)}}(this.dataURL,this.dataURL,new Set);const e=function(e=function(e="[DEFAULT]"){const t=ae.get(e);if(!t&&e===ie)return he();if(!t)throw ue.create("no-app",{appName:e});return t}()){const t=le(e=k(e),it);return t.isInitialized()?t.getImmediate():function(e,t={}){const n=le(e,it);if(n.isInitialized()){const e=n.getImmediate();if(y(t,n.getOptions()))return e;throw rt.create("already-initialized")}return n.initialize({options:t})}(e)}(he({apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:7b1b1181864d28b49de10c",measurementId:"G-FF1159TGCF"}));this.analytics=e,Ct(e,"notification_received"),Ct(e,"test initialization event",{}),console.log("firebase initialized")}spinUp(){return Qt(this,void 0,void 0,(function*(){window.addEventListener("load",(()=>{console.log("Window Loaded!"),(()=>{Qt(this,void 0,void 0,(function*(){yield function(e){return i(this,void 0,void 0,(function*(){return a(e).then((e=>e))}))}(this.dataURL).then((e=>{console.log("Assessment/Survey v1.0.10 initializing!"),console.log("App data loaded!"),console.log(e),this.cacheModel.setContentFilePath(s(this.dataURL)),l.SetFeedbackText(e.feedbackText);let t=e.appType,i=e.assessmentType;if("survey"==t)this.game=new Et(this.dataURL,this.unityBridge);else if("assessment"==t){let t=e.buckets;for(let n=0;n<t.length;n++)for(let i=0;i<t[n].items.length;i++){let s;s=e.quizName.includes("Luganda")||e.quizName.toLowerCase().includes("west african english")?"/audio/"+this.dataURL+"/"+t[n].items[i].itemName.toLowerCase().trim()+".mp3":"/audio/"+this.dataURL+"/"+t[n].items[i].itemName.trim()+".mp3",this.cacheModel.addItemToAudioVisualResources(s)}this.cacheModel.addItemToAudioVisualResources("/audio/"+this.dataURL+"/answer_feedback.mp3"),this.game=new Nt(this.dataURL,this.unityBridge)}var a;this.game.unityBridge=this.unityBridge,Mt.setUuid((null==(a=n().get("cr_user_id"))&&(console.log("no uuid provided"),a="WebUserNoID"),a),function(){var e=n().get("userSource");return null==e&&(console.log("no user source provided"),e="WebUserNoSource"),e}()),Mt.linkAnalytics(this.analytics,this.dataURL),Mt.setAssessmentType(i),Mt.sendInit("v1.0.10",e.contentVersion),this.game.Run(this)})),yield this.registerServiceWorker(this.game)}))})()}))}))}registerServiceWorker(e){return Qt(this,void 0,void 0,(function*(){console.log("Registering service worker..."),"serviceWorker"in navigator?(new zt("./sw.js",{}).register().then((e=>{console.log("Service worker registered!"),this.handleServiceWorkerRegistation(e)})).catch((e=>{console.log("Service worker registration failed: "+e)})),navigator.serviceWorker.addEventListener("message",Yt),yield navigator.serviceWorker.ready,console.log("Cache Model: "),console.log(this.cacheModel),null==localStorage.getItem(this.cacheModel.appName)?(console.log("WE DONT HAVE THIS ASSESSMENT< CACHING IT!"),Kt.style.display="flex",Xt.postMessage({command:"Cache",data:{appData:this.cacheModel}})):(Jt.style.width="100%",setTimeout((()=>{Kt.style.display="none"}),1500)),Xt.onmessage=e=>{console.log(e.data.command+" received from service worker!"),"Activated"==e.data.command&&null==localStorage.getItem(this.cacheModel.appName)&&Xt.postMessage({command:"Cache",data:{appData:this.cacheModel}})}):console.warn("Service workers are not supported in this browser.")}))}handleServiceWorkerRegistation(e){var t;try{null===(t=null==e?void 0:e.installing)||void 0===t||t.postMessage({type:"Registartion",value:this.lang})}catch(e){console.log("Service worker registration failed: "+e)}}GetDataURL(){return this.dataURL}};Zt.spinUp()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,